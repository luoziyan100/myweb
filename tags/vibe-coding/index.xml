<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Vibe Coding on yan的AI时代之旅</title><link>https://luoziyan100.github.io/myweb/tags/vibe-coding/</link><description>Recent content in Vibe Coding on yan的AI时代之旅</description><generator>Hugo -- 0.149.0</generator><language>zh-cn</language><lastBuildDate>Thu, 11 Sep 2025 23:00:00 +0800</lastBuildDate><atom:link href="https://luoziyan100.github.io/myweb/tags/vibe-coding/index.xml" rel="self" type="application/rss+xml"/><item><title>告别 Vibe 编码：GitHub 的 Spec Kit 如何彻底改变 AI 开发</title><link>https://luoziyan100.github.io/myweb/posts/2025/9%E6%9C%88%E4%BB%BD/2025-09-12-%E5%91%8A%E5%88%AB%E6%B0%9B%E5%9B%B4%E7%BC%96%E7%A0%81/</link><pubDate>Thu, 11 Sep 2025 23:00:00 +0800</pubDate><guid>https://luoziyan100.github.io/myweb/posts/2025/9%E6%9C%88%E4%BB%BD/2025-09-12-%E5%91%8A%E5%88%AB%E6%B0%9B%E5%9B%B4%E7%BC%96%E7%A0%81/</guid><description>&lt;p&gt;过去两年，开发者们正处于“氛围编码”的黄金时代。你懂的：打开你最喜欢的AI助手，输入 &lt;em&gt;“帮我开发一个带拖放功能的照片分享应用”&lt;/em&gt; ，数百行代码像变魔术一样出现，令人惊叹。有时，它运行得非常出色。但更多时候，它只是一层美丽的外衣，掩盖着摇摇欲坠的根基。&lt;/p&gt;</description><content:encoded><![CDATA[<p>过去两年，开发者们正处于“氛围编码”的黄金时代。你懂的：打开你最喜欢的AI助手，输入 <em>“帮我开发一个带拖放功能的照片分享应用”</em> ，数百行代码像变魔术一样出现，令人惊叹。有时，它运行得非常出色。但更多时候，它只是一层美丽的外衣，掩盖着摇摇欲坠的根基。</p>
<p>那个时代即将终结。GitHub 的新 <strong>Spec Kit</strong> 不仅仅是为你的开发者堆栈添加了另一个工具，它重新定义了 AI 辅助软件的构建方式。它不再只是提示，而是关乎精准、结构，以及回归工程规范。</p>
<h2 id="为什么氛围编码感觉很好直到它崩溃">为什么氛围编码感觉很好——直到它崩溃</h2>
<p>Vibe 编程很有趣，因为它速度很快。它让独立开发者和周末黑客几乎不费吹灰之力就能把不成熟的想法变成原型。但一旦项目规模超过单个程序员的规模，缺陷就会显现出来。</p>
<p>问题不在于技术，而在于沟通。人工智能模型擅长模式识别，却不擅长读心术。当你说 <em>“照片分享”</em> 时，人工智能可能会想到 Instagram、Flickr，或者一个简陋的相册。每种假设都会导致完全不同的架构。等你注意到的时候，你已经在凌晨 2 点调试别人的愿景了。</p>
<p>正如一位开发人员所说：</p>
<blockquote>
<p>问题不在于编码代理的编码能力，而在于我们的方法。我们把编码代理当成搜索引擎，而实际上我们应该把他们当成只会写代码的结对程序员。</p></blockquote>
<h2 id="进入规范时代">进入规范时代</h2>
<p>Spec Kit 颠覆了传统。它不再只是提供模糊的愿望，而是将 <strong>规范作为整个工作流程的基础</strong> 。这些规范不再是老式瀑布式项目那种僵化、官僚的规范。它们是 <em>动态文档</em> ——清晰到足以让 AI 代理执行，灵活到可以与代码一起演进。</p>
<p>为什么是现在？三大转变促使我们走到了这一步：</p>
<ul>
<li><strong>亚马逊的 Kiro 警钟</strong> ：早在 2024 年，亚马逊的 IDE 就证明了规范驱动开发优于混乱的提示。GitHub 紧随其后推出了 <a href="https://github.com/github/spec-kit">Spec Kit——</a> 开源、免费且易于访问。</li>
<li><strong>实际结果</strong> ：开发人员报告在 15 分钟内构建了可用于生产的应用程序，然后进行自动实施。</li>
<li><strong>技术债务危机</strong> ：整个 YouTube 频道充斥着 AI 生成的“看似正确但实际无法正常工作的代码墙”。团队已经到达了临界点，速度正在破坏可维护性。</li>
</ul>
<h2 id="阻止-ai-失控的-4-个步骤">阻止 AI 失控的 4 个步骤</h2>
<p>Spec Kit 通过结构化的四阶段流程指导开发。您可以将其视为 AI 编码的护栏。</p>
<h2 id="1-具体化定义什么和为什么">1. 具体化——定义“什么”和“为什么”</h2>
<p>该 <code>/specify</code> 命令强制在编写单行代码之前保持清晰度。</p>
<p>例子：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">构建</span> Taskify<span style="color:#960050;background-color:#1e0010">，这是一个团队生产力平台，允许用户创建</span> <span style="color:#960050;background-color:#1e0010">项目、添加</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">团队成员、分配任务以及在看板之间移动任务。</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">用户应该能够对任务进行评论，并看到分配给他们的工作被高亮显示。</span>
</span></span></code></pre></div><p>注意到缺少了什么吗？没有数据库选项，没有框架。只有用户结果和业务逻辑。这避免了“AI 猜测”，并将开发锚定在目标上。</p>
<h2 id="2-计划选择如何做">2. 计划——选择“如何做”</h2>
<p>接下来是 <code>/plan</code> 。只有在这里你才能定义架构、框架和技术栈。</p>
<p>例子：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">使用</span>.NET Aspire和Postgres实现<span style="color:#960050;background-color:#1e0010">。前端</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">应使用</span> Blazor <span style="color:#960050;background-color:#1e0010">服务器和</span>SignalR进行 <span style="color:#960050;background-color:#1e0010">实时更新。为项目、任务和通知创建</span>REST API <span style="color:#960050;background-color:#1e0010">。实现</span> JWT <span style="color:#960050;background-color:#1e0010">身份验证和基于角色的访问控制。</span>
</span></span></code></pre></div><p>通过将业务目标与技术决策分开，您可以避免技术驱动产品的陷阱。</p>
<h2 id="3-任务分解">3. 任务——分解</h2>
<p>该 <code>/tasks</code> 命令将项目分解为细粒度的、可测试的单元。Spec Kit 无需转储 1,000 行代码，而是创建如下的小任务：</p>
<ul>
<li>构建具有验证和错误处理功能的任务创建 API</li>
<li>使用乐观的用户界面实现拖放看板</li>
<li>为新任务分配添加 WebSocket 通知</li>
</ul>
<p>这使得工作易于审查、易于测试，并且不那么令人难以承受。</p>
<h2 id="4-实施充满信心地执行">4. 实施——充满信心地执行</h2>
<p>只有在定义好规格、计划和任务之后，AI 才会生成实际代码。此时，您审查的是重点解决方案，而不是修补混乱的输出。早期采用者报告称，组件分离更加清晰，错误更少，调试周期也更快。</p>
<h2 id="测试驱动开发复兴">测试驱动开发复兴</h2>
<p>Spec Kit 最被低估的功能是什么？它融入了测试驱动开发。默认情况下，任务会转换为可测试单元，AI 代理会自动生成测试文件、模式和验收标准。</p>
<p>这使得规范变成了 <strong>活的文档</strong> ——需求不会消失在 wiki 或 Slack 讨论组中。它们会随着代码的演进而发展，保持可验证性，并将“真相来源”保持在意图层面，而非实现层面。</p>
<h2 id="企业为何应关注">企业为何应关注</h2>
<p>Spec Kit 不仅仅关乎个人生产力。它最大的影响体现在规模上：</p>
<ul>
<li><strong>知识管理</strong> ：规范捕获合规规则、设计约束和集成需求——使部落知识明确且可共享。</li>
<li><strong>遗留系统现代化</strong> ：团队可以将丢失的业务逻辑重新表达为规范，设计新的架构，并让 AI 重建系统。</li>
<li><strong>合规性和可审计性</strong> ：每个决策都会被记录下来。例如，为什么选择一个框架，API 是如何设计的——所有这些都有记录，可供审查。</li>
</ul>
<h2 id="成本与限制">成本与限制</h2>
<p>没有什么是免费的。早期采用者强调：</p>
<ul>
<li><strong>令牌开销</strong> ：仅针对规范驱动的工作流程，一个应用程序的 API 调用成本就约为 8 美元。</li>
<li><strong>学习曲线</strong> ：开发人员必须改掉“提示并祈祷”的习惯。</li>
<li><strong>设置摩擦</strong> ：初始配置可能会感觉笨重。</li>
</ul>
<p>但大多数人都同意这种权衡——更少的调试、更清晰的架构、更清晰的协作——是值得的。</p>
<h2 id="成功团队的模式">成功团队的模式</h2>
<p>如果您想尝试 Spec Kit，请执行以下操作：</p>
<ol>
<li><strong>从小处着手</strong> ：指定单个功能，而不是整个应用程序。</li>
<li><strong>迭代改进</strong> ：要求您的 AI 批评规格、建议边缘情况并对假设进行压力测试。</li>
<li><strong>使用模板</strong> ：可重复使用的规范库已经出现，就像开源代码一样。</li>
<li><strong>对规范进行版本控制</strong> ：将它们视为代码，提交给 Git，进行审查和更新。</li>
</ol>
<h2 id="从提示与祈祷到工程纪律">从“提示与祈祷”到“工程纪律”</h2>
<p>该行业正在从“代码是真相的来源”转变为 <em>“意图是真相的来源”。Spec</em> Kit 体现了这种转变。</p>
<p>这不会扼杀创造力，反而会引导创造力。开发人员仍然可以即兴发挥，但现在有了乐谱，不再是猜测。对于团队来说，这意味着软件不仅功能齐全，而且易于维护、可审计且可靠。</p>
<p>正如一位从业者所说：</p>
<blockquote>
<p>“2025 年最有价值的开发人员技能是什么？编写代码规范。”</p></blockquote>
<h3 id="一个简单的-4-步框架将规范转化为行动使-ai-开发更加结构化可测试和可扩展">一个简单的 4 步框架，将规范转化为行动——使 AI 开发更加结构化、可测试和可扩展。</h3>
<p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:640/format:webp/1*00YXoxuIK7Uo7LnmxC03wQ.png"></p>
<p>这四个步骤为任何团队提供了一种清晰、可重复的方法，从氛围编码转向可靠的、规范驱动的开发。</p>
<h2 id="人工智能原生开发的未来">人工智能原生开发的未来</h2>
<p>展望未来，规格可能会变成：</p>
<ul>
<li><strong>一流的 IDE 工件</strong> ：代码旁边的实时规格面板。</li>
<li><strong>跨职能中心</strong> ：项目经理、设计师和工程师共享的文档。</li>
<li><strong>人工智能训练数据</strong> ：为更智能、更具情境感知能力的代理提供动力。</li>
</ul>
<p><strong>剩下的唯一问题是：你会继续保持这种感觉——还是开始指定？</strong></p>
]]></content:encoded></item></channel></rss>